-- name: Deploy Systest to Amazon ECS

-- on:
--   push:
--     branches:
--       - systest

-- env:
--   REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/learnspace-bknd-systest
--   ECR_REPOSITORY: learnspace-bknd-systest
--   AWS_REGION: eu-west-1
--   CLUSTER: learnspace

--   SERVICE: learnspacesystest

-- jobs:
--   build-and-deploy:
--     runs-on: ${{ matrix.os }}
--     strategy:
--       matrix:
--         os: [ubuntu-latest]

--     steps:
--       - name: Checkout code
--         uses: actions/checkout@v2

--       - name: Set up JDK 17
--         uses: actions/setup-java@v3
--         with:
--           java-version: '17'
--           distribution: 'temurin'
--           cache: maven

--       - name: Restore Maven Cache
--         uses: actions/cache@v2
--         with:
--           path: ~/.m2/repository
--           key: ${{ runner.os }}-maven-${{ hashFiles('**/*.xml') }}
--           restore-keys: |
--             ${{ runner.os }}-maven-

--       - name: Set up Node.js
--         uses: actions/setup-node@v2
--         with:
--           node-version: '14'

--       - name: Configure AWS credentials
--         uses: aws-actions/configure-aws-credentials@v1
--         with:
--           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
--           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
--           aws-region: ${{ env.AWS_REGION }}




--       - name: Login to Amazon ECR
--         id: login-ecr
--         uses: aws-actions/amazon-ecr-login@v1

--       - name: Build, tag, and push image to Amazon ECR
--         id: build-image
--         env:
--          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
--          IMAGE_TAG: ${{ github.sha }}

--         run: |
--           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
--           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
--           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT


--       - name: Update ECS service
--         run: |
--           aws ecs update-service --cluster ${{ env.CLUSTER }} --service ${{ env.SERVICE }} --force-new-deployment
