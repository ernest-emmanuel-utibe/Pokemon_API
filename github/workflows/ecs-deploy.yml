# name: Deploy to Ecs
# on:
#   release:
#     types: [published]



# env:
#   REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/learnspace-backend-prod
#   ECR_REPOSITORY: learnspace-backend-prod
#   AWS_REGION: eu-west-1
#   CLUSTER: learnspace
#   SERVICE: learnspace-backend


# jobs:
#   build-and-deploy:
#     runs-on: ${{matrix.os}}
#     strategy:
#       matrix:
#         os: [ubuntu-latest]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#           cache: maven

#       - name: Restore Maven Cache
#         uses: actions/cache@v2
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/*.xml') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-
          



#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'



#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: eu-west-1


#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1


#       - name: Build Docker image
#         run: docker build -t ${{ env.ECR_REPOSITORY }}:$GITHUB_SHA .

#       - name: Tag Docker image with "latest"
#         run: |
#          DOCKER_TAG=${{ env.REPO_URL }}:latest
#          docker tag ${{ env.ECR_REPOSITORY }}:$GITHUB_SHA $DOCKER_TAG
#          docker tag ${{ env.ECR_REPOSITORY }}:$GITHUB_SHA ${{ env.REPO_URL }}:$GITHUB_SHA

#       - name: Push Docker image to ECR
#         run: |
#           docker push ${{ env.REPO_URL }}:latest
#           docker push ${{ env.REPO_URL }}:$GITHUB_SHA
      
        

#       - name: Update ECS service
#         run: |
#           aws ecs update-service --cluster ${{ env.CLUSTER }} --service ${{ env.SERVICE }} --force-new-deployment 
